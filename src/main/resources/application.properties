#spring.elasticsearch.rest.uris=localhost:9200
spring.elasticsearch.rest.uris=http://localhost:9200
spring.elasticsearch.rest.connection-timeout=1s
spring.elasticsearch.rest.read-timeout=1m
spring.elasticsearch.rest.password=ayushman
spring.elasticsearch.rest.username=elastic


#elasticsearchclient.hostname: localhost
#elasticsearchclient.port: 9200
#elasticsearchclient.username: elastic
#elasticsearchclient.password: ayushman

# Elasticsearch Config
#spring.data.elasticsearch.cluster-nodes=${ES_CLUSTER_URL}:${ES_CLUSTER_PORT}
#spring.data.elasticsearch.cluster-name=elasticsearch
#es.index-name=launchcart


es.index-name=student-index3
es.index-type=student-type




#spring.datasource.url=jdbc:mysql://localhost:3306/order-service
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.initialization-mode=always
#spring.jpa.show-sql=true
#spring.datasource.username=root
#spring.datasource.password=mysql
#server.port=0  //As we set the server.port property as 0, the service will run on a Random Port.



#spring.application.name=configuration-server
#server.port=8888
#spring.cloud.config.server.git.uri=https://github.com/SaiUpadhyayula/microservices-config-server
#spring.cloud.config.server.git.username=
#spring.cloud.config.server.git.password=
#spring.cloud.config.server.git.clone-on-start=true
#By default, Spring Cloud Config Server tries to clone a repository after the first HTTP resource call. So we are going to force the server to clone the repository at the time of startup itself, with the help of spring.cloud.config.server.git.clone-on=true property.
#The spring-cloud-starter-bootstrap is used to tell Spring framework to connect to the configuration server at the time of bootstrapping the application.